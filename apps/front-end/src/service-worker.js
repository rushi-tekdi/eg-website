// service-worker.js

import { precacheAndRoute } from "workbox-precaching";

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Define the cache name
const CACHE_NAME = "eg-pragati-cache-v2";

const urlsToCache = [
  "/",
  "/index.html",
  // Add other static assets to cache
];

self.addEventListener("install", (event) => {
  event.waitUntil(
    caches.open(CACHE_NAME).then((cache) => cache.addAll(urlsToCache))
  );
});

self.addEventListener("fetch", (event) => {
  event.respondWith(
    caches
      .match(event.request)
      .then((response) => {
        // If resource is cached, return it
        if (response) {
          return response;
        }
        // If offline and request for HTML, return cached index.html
        if (!navigator.onLine && event.request.url.endsWith("/index.html")) {
          return caches.match("/index.html");
        }
        // If offline and request for other resources, return custom offline response
        if (!navigator.onLine) {
          return new Response("Offline", {
            status: 503,
            statusText: "Service Unavailable",
          });
        }
        // If online and request for dynamic JS file, fetch from network
        if (event.request.url.includes("/dynamic-main-")) {
          return fetch(event.request);
        }
        // For other requests, fetch from network and cache the response
        return fetch(event.request).then((networkResponse) => {
          const clonedResponse = networkResponse.clone();
          caches.open(CACHE_NAME).then((cache) => {
            cache.put(event.request, clonedResponse);
          });
          return networkResponse;
        });
      })
      .catch(() => {
        // If fetch fails and resource not in cache, return custom offline response
        if (event.request.url.endsWith("/index.html")) {
          return caches.match("/index.html");
        }
        return new Response("Offline", {
          status: 503,
          statusText: "Service Unavailable",
        });
      })
  );
});

self.addEventListener("activate", (event) => {
  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames.map((cacheName) => {
          if (cacheName !== CACHE_NAME) {
            return caches.delete(cacheName);
          }
        })
      );
    })
  );
});
